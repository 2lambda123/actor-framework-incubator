// clang-format off
// DO NOT EDIT: this file is auto-generated by caf-generate-enum-strings.
// Run the target update-enum-strings if this file is out of sync.
#include "caf/config.hpp"
#include "caf/string_view.hpp"

CAF_PUSH_DEPRECATED_WARNING

#include "caf/net/basp/connection_state.hpp"

#include <string>

namespace caf {
namespace net {
namespace basp {

std::string to_string(connection_state x) {
  switch(x) {
    default:
      return "???";
    case connection_state::await_handshake_header:
      return "await_handshake_header";
    case connection_state::await_handshake_payload:
      return "await_handshake_payload";
    case connection_state::await_header:
      return "await_header";
    case connection_state::await_payload:
      return "await_payload";
    case connection_state::shutdown:
      return "shutdown";
  };
}

bool from_string(string_view in, connection_state& out) {
  if (in == "await_handshake_header") {
    out = connection_state::await_handshake_header;
    return true;
  } else if (in == "await_handshake_payload") {
    out = connection_state::await_handshake_payload;
    return true;
  } else if (in == "await_header") {
    out = connection_state::await_header;
    return true;
  } else if (in == "await_payload") {
    out = connection_state::await_payload;
    return true;
  } else if (in == "shutdown") {
    out = connection_state::shutdown;
    return true;
  } else {
    return false;
  }
}

bool from_integer(std::underlying_type_t<connection_state> in,
                  connection_state& out) {
  auto result = static_cast<connection_state>(in);
  switch(result) {
    default:
      return false;
    case connection_state::await_handshake_header:
    case connection_state::await_handshake_payload:
    case connection_state::await_header:
    case connection_state::await_payload:
    case connection_state::shutdown:
      out = result;
      return true;
  };
}

} // namespace basp
} // namespace net
} // namespace caf

CAF_POP_WARNINGS
